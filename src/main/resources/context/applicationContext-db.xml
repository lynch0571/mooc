<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
    http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
    http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.2.xsd">

    <!-- Druid数据源配置 -->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
        <!-- 数据库连接driver -->
        <property name="driverClassName" value="${datasource.driverClassName}"/>
        <!-- 数据库连接url -->
        <property name="url" value="${datasource.url}"/>
        <!-- 数据库用户 -->
        <property name="username" value="${datasource.username}"/>
        <!-- 数据库密码 -->
        <property name="password" value="${datasource.password}"/>
        <!-- 配置连接池初始化大小 -->
        <property name="initialSize" value="${druid.initialSize}"/>
        <!-- 最小空闲连接数 -->
        <property name="minIdle" value="${druid.minIdle}"/>
        <!-- 最大连接数 -->
        <property name="maxActive" value="${druid.maxActive}"/>
        <!-- 获取连接等待超时的时间，单位：毫秒 -->
        <property name="maxWait" value="${druid.maxWait}"/>

        <property name="timeBetweenEvictionRunsMillis" value="${druid.timeBetweenEvictionRunsMillis}"/>
        <property name="minEvictableIdleTimeMillis" value="${druid.minEvictableIdleTimeMillis}"/>
        <property name="testWhileIdle" value="${druid.testWhileIdle}"/>
        <property name="testOnBorrow" value="${druid.testOnBorrow}"/>
        <property name="testOnReturn" value="${druid.testOnReturn}"/>
        <property name="poolPreparedStatements" value="${druid.poolPreparedStatements}"/>
        <property name="maxPoolPreparedStatementPerConnectionSize"
                  value="${druid.maxPoolPreparedStatementPerConnectionSize}"/>
    </bean>


    <!-- 创建SqlSessionFactory，同时指定数据源-->
    <!-- configLocation为mybatis属性 mapperLocations为所有mapper-->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <!-- 自动扫描mapping.xml文件 -->
        <property name="mapperLocations" value="classpath:com/suime/admin/dao/mapper/*.xml"></property>
        <property name="configurationProperties">
            <props>
                <prop key="cacheEnabled">true</prop>
                <prop key="lazyLoadingEnabled">false</prop>
                <prop key="aggressiveLazyLoading">true</prop>
                <prop key="multipleResultSetsEnabled">true</prop>
                <prop key="useColumnLabel">true</prop>
                <prop key="useGeneratedKeys">true</prop>
                <prop key="autoMappingBehavior">FULL</prop>
                <prop key="defaultExecutorType">BATCH</prop>
                <prop key="defaultStatementTimeout">25000</prop>
            </props>
        </property>
    </bean>

    <!-- spring与mybatis整合配置，扫描所有dao -->
    <!-- 通过扫描的模式，扫描目录在com/hoo/mapper目录下，所有的mapper都继承GenericMapper接口的接口， 这样一个bean就可以了 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.suime.admin.dao"/>
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
        <!--
        <property name="markerInterface" value="com.confucian.mybatis.support.mapper.GenericMapper"/>
        -->
    </bean>

    <!-- 对数据源进行事务管理 -->
    <!-- 1. 配置事务管理器 -->
    <bean name="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"></property>
    </bean>

    <!-- 2. 配置事务属性, 需要事务管理器 -->
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <tx:method name="get*" propagation="REQUIRED" read-only="true"/>
            <tx:method name="find*" propagation="REQUIRED" read-only="true"/>
            <tx:method name="load*" propagation="REQUIRED" read-only="true"/>
            <tx:method name="is*" propagation="REQUIRED" read-only="true"/>
            <tx:method name="page*" propagation="REQUIRED" read-only="true"/>
            <tx:method name="search*" propagation="REQUIRED" read-only="true"/>
            <tx:method name="save*" propagation="REQUIRED"/>
            <tx:method name="add*" propagation="REQUIRED"/>
            <tx:method name="create*" propagation="REQUIRED"/>
            <tx:method name="insert*" propagation="REQUIRED"/>
            <tx:method name="update*" propagation="REQUIRED"/>
            <tx:method name="reset*" propagation="REQUIRED"/>
            <tx:method name="remove*" propagation="REQUIRED"/>
            <tx:method name="del*" propagation="REQUIRED"/>
            <tx:method name="change*" propagation="REQUIRED"/>
            <tx:method name="apply*" propagation="REQUIRED"/>
            <tx:method name="flush*" propagation="NEVER"/>
            <tx:method name="make*" propagation="NOT_SUPPORTED"/>
            <tx:method name="writeLog" propagation="REQUIRES_NEW"/>
            <tx:method name="*" propagation="REQUIRED" read-only="true"/>
        </tx:attributes>
    </tx:advice>

    <!-- 3. 配置事务切点, 并把切点和事务属性关联起来 -->
    <aop:config>
        <aop:pointcut id="txPointcut" expression="(execution(* com.suime.admin.service.*.*(..)))"/>
        <aop:advisor advice-ref="txAdvice" pointcut-ref="txPointcut"/>
    </aop:config>
</beans>